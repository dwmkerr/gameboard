version: 2
jobs:
  build:
    working_directory: ~/project
    docker:
      - image: circleci/node:8
    environment:
      # Limit react native workers to the 2 CPUs provided by CircleCI.
      REACT_NATIVE_MAX_WORKERS: 2
    steps:
      - checkout
      - run: npm install
      - run: npm test
      - run: cd ~/project/artifacts/coverage && bash <(curl -s https://codecov.io/bash)
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
      - store_test_results:
          path: ~/project/artifacts/tests/junit.xml

  android:
    resource_class: large
    # Explicitly limit gradle heap size, otherwise docker might kill the
    # container leading to annoying '137' errors. See:
    # https://discuss.circleci.com/t/circle-ci-v2-and-android-memory-issues/11207/20
    environment:
      # Limit react native workers to the 2 CPUs provided by CircleCI.
      REACT_NATIVE_MAX_WORKERS: 2
    environment:
      JAVA_OPTS: "-Xms512m -Xmx1024m"
      _JAVA_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'
    docker:
      - image: circleci/android:api-28-node8-alpha
    steps:
      - checkout
      # - restore_cache:
          # key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
      # - attach_workspace:
          # at: ~/project
      - run: sudo apt-get update
      - run: sudo apt-get install -y --fix-missing imagemagick 
      # Install the appropriate bundler version.
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      - run: npm install
      - run: BUILD_NUM=$CIRCLE_BUILD_NUM ./scripts/version.sh
      - run: bundle install
      # Currently Android builds will fail due to memory limitations on the
      # CircleCI runners. They are disabled for now.
      # See: https://github.com/dwmkerr/gameboard/issues/27
      # See: https://github.com/facebook/react-native/issues/16906
      - run: "bundle exec fastlane android build && echo 0"
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/app/build.gradle" }}
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./artifacts/android
      - store_artifacts:
          path: ~/project/artifacts/android
      - store_test_results:
          path: ~/project/android/reports

  ios:
    macos:
      xcode: "10.0.0"
    working_directory: /Users/distiller/project
    environment:
      # Limit react native workers to the 2 CPUs provided by CircleCI.
      REACT_NATIVE_MAX_WORKERS: 2
      # Set appropriate language.
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      # Configure fastlane output directory.
      FL_OUTPUT_DIR: /Users/distiller/project/output
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: /Users/distiller/project
      - attach_workspace:
          at: /Users/distiller/project
      - run:
          name: Set Ruby Version
          command:  echo "ruby-2.4" > ~/.ruby-version
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler
      # Use npm 6, which fixes some instablities.
      - run: npm -g i npm@6
      # Not using a workspace here as Node and Yarn versions
      # differ between the macOS image and the Docker containers above.
      - run: brew install imagemagick jq
      - run: BUILD_NUM=$CIRCLE_BUILD_NUM ./scripts/version.sh
      - run: make ios
      # Disabling test report stuff for now.
      # - run:
      #  command: cp $FL_OUTPUT_DIR/scan/report.junit $FL_OUTPUT_DIR/scan/results.xml || true
      #  when: always
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./artifacts/ios
      - store_artifacts:
          path: /Users/distiller/project/artifacts/ios
      - store_test_results:
          path: /Users/distiller/project/output/scan

  # Pushes the built app artifacts to testfairy.
  release-alpha:
    working_directory: ~/project
    docker:
      - image: circleci/node:8
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run: make upload-alpha

workflows:
  version: 2
  node-android-ios:
    jobs:
      - build:
          # All branches, all tags.
          filters:
            tags:
              only: /.*/
      - ios:
          requires:
            - build
          # All branches, all tags.
          filters:
            tags:
              only: /.*/
      - android:
          requires:
            - build
          # All branches, all tags.
          filters:
            tags:
              only: /.*/
      - release-alpha:
          requires:
            - android
            - ios
          filters:
            # No branches, version tags only.
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
